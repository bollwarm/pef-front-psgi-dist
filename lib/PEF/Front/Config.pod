=head1 NAME

B<PEF::Front::Config> - how to configure PEF::Front to suit your needs

=head1 DESCRIPTION

B<PEF::Front::Config> handles configuration of your apps. 
The documentation for this module aims to describe how to change
settings, and which settings are available.

=head1 SETTINGS
 
Subroutine names in your configuration module B<*::AppFrontConfig> define
configuration parameters. This module has to be loaded first on startup.
B<PEF::Front> has many sensible defaults but you have to provide some data.  
 
  package MyApp::AppFrontConfig;
  sub cfg_db_user      { "user" }
  sub cfg_db_password  { "mypassword" }
  sub cfg_db_name      { "mydb" }
  1; 

In these subroutines you can return some constants or load them from some 
source. 

You can define your own subroutines and export them to your handlers.
B<PEF::Front::Config> has some limited functionality of L<Exporter>. 

  package MyApp::AppFrontConfig;
  our @EXPORT = qw(avatar_images_path);
  sub avatar_images_path { cfg_www_static_dir() .'/images/avatars' }

  # somewhere in handlers
  package MyApp::Local::Avatar;
  use PEF::Front::Config;

  sub upload {
    my ($req, $ctx) = @_;
    my $upload_path = avatar_images_path();
    # ...
  }

It works a little-bit non-trivial: B<PEF::Front> reads parameters from 
MyApp::AppFrontConfig, determines the whole configuration and re-export
it into MyApp::AppFrontConfig. This way you can use automatically calculated
configuration data in your configuration subroutines. 

B<< PEF::Front::Config::cfg( C<$config_key>) >> returns configuration 
value for the given C<$config_key> if it doesn't require parameter.

=head1 SUPPORTED SETTINGS
 
=over

 
=item B<cfg_app_namespace>

Application modules namespace. By default it's calculated from full 
name of your B<*::AppFrontConfig> module. But probably you can change it for
some unknown reason.

=item B<cfg_cache_file>

Full path to cache file. 
Default is C<cfg_project_dir() . "/var/cache/shared.cache">

=item B<cfg_cache_method_expire>

Default expire time for cached responses. 
By default it's equal to 60 [seconds].

=item B<cfg_cache_size>

Cache size. Default is equal to "8m" = 8 Megabytes.

=item B<cfg_captcha_db>

Sets the directory to hold the database that will be used to store the current
non-expired valid captcha tokens. 
Default is C<cfg_project_dir() . "/var/captcha-db">

=item B<cfg_captcha_expire_sec>

Sets the number of seconds this captcha will remain valid. Default is 300.

=item B<cfg_captcha_font>

The absolute path to your TrueType (.ttf) font file. 
Be aware that relative font paths are not recognized due to problems in the 
libgd library. Default is "giant" - not a good font, you would better 
change it.

=item B<cfg_captcha_image_class>

Allows to inject user's captcha image generation class. 
Default is "PEF::Front::SecureCaptcha" which is really not very
pretty but works. Captcha image generation class have to implement only
one method: 

  generate_image(
    width      => $width,
    height     => $height,
    size       => $size,
    str        => $str,
    code       => $sha1,
    out_folder => $cfg_www_static_captchas_dir,
    font       => cfg_captcha_font(),
    %$image_init,
  )

Where $image_init is optional hash reference 
from B<cfg_captcha_image_init> parameter.

=item B<cfg_captcha_image_init>

Optional hash reference of extra values 
for captcha's generate_image method.

=item B<cfg_captcha_secret>

Salt for secure captcha's code generation. Default is B<cfg_app_namespace>.

=item B<cfg_captcha_symbols>

Array of symbols for captcha's code.

=item B<cfg_collect_unknown_msgid>

Boolean value whether to collect or not not translated localized phrases. 
You can translate these collected phrases later.

=item B<cfg_cookie_unset_negative_expire>

Cookie-unset sets expiration time of the cookie in the past. This parameter 
says how much in the past. Default is -3600 seconds - 1 hour.  

=item B<cfg_db_name>

Default full DSN or PostgreSQL's database name. 
Default is "pef" which is pretty useless. 
Here "pef" really means "dbi:Pg:dbname=pef".

=item B<cfg_db_password>

Default password for DB user.

=item B<cfg_db_reconnect_trys>

How many times it tries to reconnect with 1 second pauses
in case some DB connection failure. During this time all
queries will be waiting for connection. They will fail after
final failure or continue to work as if nothing happened if 
connection finally comes back.

=item B<cfg_db_user>

Default DB user name.

=item B<cfg_default_lang>

Default localization language when guessing from HTTP headers or Geo IP 
doesn't help. 

=item B<cfg_handle_static>

Boolean value whether your application handle static content or not. 
Default is false - it is better served by some fast server like 
L<Nginx|https://www.nginx.com/>.

=item B<cfg_in_filter_dir>

Directory of input parameter filter modules. It's better not to change, 
use it as read-only value. Changing this value you can break framework.
Default is "$app_project_dir/InFilter". 

=item B<cfg_location_error>

Redirect for location errors (404). 
Default is "/appError?msgid=Internal\%20Error".

=item B<cfg_log_level_debug>

Boolean value whether debug logging is on. Default is false.

=item B<cfg_log_level_error>

Boolean value whether error logging is on. Default is true.

=item B<cfg_log_level_info>

Boolean value whether informational logging is on. Default is true.

=item B<cfg_model_dir>

Directory of model description YAML-files. 
Default is cfg_project_dir() . "/model".

=item B<cfg_model_local_dir>

Directory of "local" model handlers modules. Do not change it.
Default is "$app_project_dir/Local". 

=item B<cfg_no_multilang_support>

Boolean value whether application supports multilanguage. Default is true.

=item B<cfg_no_nls>

Boolean value whether application localization is off. Default is false.
Localization can work without multilanguage support.

=item B<cfg_oauth_connect_timeout>

Timeout for operations with Oauth2-providers. Default is 15 seconds. 

=item B<cfg_out_filter_dir>

Directory of response output filter modules. It's better not to change, 
use it as read-only value. Changing this value you can break framework.
Default is "$app_project_dir/OutFilter". 

=item B<cfg_project_dir>

Root directory of your application. It is guessed by default from 
path to your startup file.

=item B<cfg_session_db_file>

Sets database file that will be used to store the user session data.
Default is cfg_project_dir() . "/var/cache/session.db".

=item B<cfg_session_request_field>

Sets session identifier field from cookies or form data. Session data
can be automatically loaded during request validation. Default is "auth".

=item B<cfg_session_ttl>

Time to live for session data. Default is 30 days.

=item B<cfg_template_cache>

Sets directory for compiled templates.
Default is cfg_project_dir() . "/var/tt_cache".

=item B<cfg_template_dir_contains_lang>

Boolean value whether templates for different languages are in their own 
directories.  Default is false. 

=item B<cfg_unknown_msgid_db>

Sets database file for not translated localized messages. 
You can export these phrases into POT file and translate them later. 
Default is cfg_project_dir() . "/var/cache/unknown-msgid.db". 

=item B<cfg_upload_dir>

Root directory for uploaded files.
Default is cfg_project_dir() . "/var/upload".

=item B<cfg_url_contains_lang>

Boolean value whether URI path is prefixed with short language name
like /en/, /de/, etc. Default is false.

=item B<cfg_www_static_captchas_dir>

Directory for generated captcha images. 
Default is cfg_project_dir() . "/www-static/captchas".

=item B<cfg_www_static_captchas_path>

URI path for generated captcha images.
Default is deducted cfg_www_static_dir from cfg_www_static_captchas_dir.

=item B<cfg_www_static_dir>

Directory of static content that is usually served directly by web-server.

=back

=head1 PARAMETRIZED HOOKS

=over

=item B<cfg_context_post_hook($context)>

This function is called when request context is already made up but 
handler is not called yet.

=item B<cfg_logger($request)>

This method should return subroutine that 
accept ({level => "warn", message => $message}) and writes log message.
By default this function returns 

  $request->{env}{'psgix.logger'} 
  || sub {$request->{env}{'psgi.errors'}->print($_[0]->{message});} 

=item B<cfg_model_rpc($method)>

This function calls "remote" model methods.

=item B<cfg_oauth_client_id($service)>

Returns C<client id> of your application for given $service. 
Default is 'anonymous'.

=item B<cfg_oauth_client_secret($service)>

Returns C<client secret> of your application for given $service. 
Default is 'anonymous_secret'.

=item B<cfg_oauth_scopes($service)>

Returns scopes for given $service. Default is quite sensible 
for all supported services to obtain user info.

=item B<cfg_template_dir($request, $lang)>

Returns one or more directories with templates.
Default is cfg_project_dir() . "/templates" or 
cfg_project_dir() . "/templates/$lang" depending on 
cfg_template_dir_contains_lang. 


=back

=head1 AUTHOR
 
This module was written and is maintained by Anton Petrusevich.

=head1 Copyright and License
 
Copyright (c) 2016 Anton Petrusevich. Some Rights Reserved.
 
This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut
